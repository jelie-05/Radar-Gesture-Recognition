def @main(%serving_default_input:0: Tensor[(1, 3, 32, 10), float32] /* span=serving_default_input:0:0:0 */, %v_param_1: Tensor[(3, 3, 3, 12), float32] /* span=convolution:0:0 */, %v_param_2: Tensor[(12), float32] /* span=Const_12:0:0 */, %v_param_3: Tensor[(3, 3, 12, 24), float32] /* span=convolution_1:0:0 */, %v_param_4: Tensor[(24), float32] /* span=Const_10:0:0 */, %v_param_5: Tensor[(3, 3, 24, 48), float32] /* span=convolution_2:0:0 */, %v_param_6: Tensor[(48), float32] /* span=Const_8:0:0 */, %v_param_7: Tensor[(3, 3, 48, 96), float32] /* span=convolution_3:0:0 */, %v_param_8: Tensor[(96), float32] /* span=Const_6:0:0 */, %v_param_11: Tensor[(48, 96), float32] /* span=MatMul:0:0 */, %v_param_12: Tensor[(48), float32] /* span=Const_4:0:0 */, %v_param_13: Tensor[(24, 48), float32] /* span=MatMul_1:0:0 */, %v_param_14: Tensor[(24), float32] /* span=Const_2:0:0 */, %v_param_15: Tensor[(5, 24), float32] /* span=MatMul_2:0:0 */, %v_param_16: Tensor[(5), float32] /* span=Const:0:0 */, output_tensor_names=["PartitionedCall_0"]) {
  %0 = transpose(%serving_default_input:0, axes=[0, 2, 3, 1]) /* span=transpose_1:0:0 */;
  %1 = nn.conv2d(%0, %v_param_1, padding=[0, 0, 0, 0], channels=12, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* span=onnx_tf_prefix_/model/model.2/Relu;Add;convolution;Const_12:0:0 */;
  %2 = nn.bias_add(%1, %v_param_2, axis=3) /* span=onnx_tf_prefix_/model/model.2/Relu;Add;convolution;Const_12:0:0 */;
  %3 = nn.relu(%2) /* span=onnx_tf_prefix_/model/model.2/Relu;Add;convolution;Const_12:0:0 */;
  %4 = nn.conv2d(%3, %v_param_3, padding=[0, 0, 0, 0], channels=24, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* span=onnx_tf_prefix_/model/model.5/Relu;Add_1;convolution_1;Const_10:0:0 */;
  %5 = nn.bias_add(%4, %v_param_4, axis=3) /* span=onnx_tf_prefix_/model/model.5/Relu;Add_1;convolution_1;Const_10:0:0 */;
  %6 = nn.relu(%5) /* span=onnx_tf_prefix_/model/model.5/Relu;Add_1;convolution_1;Const_10:0:0 */;
  %7 = nn.conv2d(%6, %v_param_5, padding=[0, 0, 0, 0], channels=48, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* span=onnx_tf_prefix_/model/model.8/Relu;Add_2;convolution_2;Const_8:0:0 */;
  %8 = nn.bias_add(%7, %v_param_6, axis=3) /* span=onnx_tf_prefix_/model/model.8/Relu;Add_2;convolution_2;Const_8:0:0 */;
  %9 = nn.relu(%8) /* span=onnx_tf_prefix_/model/model.8/Relu;Add_2;convolution_2;Const_8:0:0 */;
  %10 = nn.conv2d(%9, %v_param_7, padding=[0, 0, 0, 0], channels=96, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* span=onnx_tf_prefix_/model/model.11/Relu;Add_3;convolution_3;Const_6:0:0 */;
  %11 = nn.bias_add(%10, %v_param_8, axis=3) /* span=onnx_tf_prefix_/model/model.11/Relu;Add_3;convolution_3;Const_6:0:0 */;
  %12 = nn.relu(%11) /* span=onnx_tf_prefix_/model/model.11/Relu;Add_3;convolution_3;Const_6:0:0 */;
  %13 = transpose(%12, axes=[0, 3, 1, 2]) /* span=transpose_11:0:0 */;
  %14 = mean(%13, axis=[2, 3], keepdims=True) /* span=Mean:0:0 */;
  %15 = reshape(%14, newshape=[1, -1]) /* span=flatten/Reshape;Reshape:0:0 */;
  %16 = reshape(%15, newshape=[-1, 96]) /* span=MatMul;add_4:0:0 */;
  %17 = nn.dense(%16, %v_param_11, units=48) /* span=MatMul;add_4:0:0 */;
  %18 = nn.bias_add(%17, %v_param_12) /* span=MatMul;add_4:0:0 */;
  %19 = reshape(%18, newshape=[-1, 48]) /* span=flatten_1/Reshape:0:0 */;
  %20 = reshape(%19, newshape=[-1, 48]) /* span=MatMul_1;add_5:0:0 */;
  %21 = nn.dense(%20, %v_param_13, units=24) /* span=MatMul_1;add_5:0:0 */;
  %22 = nn.bias_add(%21, %v_param_14) /* span=MatMul_1;add_5:0:0 */;
  %23 = reshape(%22, newshape=[-1, 24]) /* span=flatten_2/Reshape:0:0 */;
  %24 = reshape(%23, newshape=[-1, 24]) /* span=PartitionedCall:0:0:0 */;
  %25 = nn.dense(%24, %v_param_15, units=5) /* span=PartitionedCall:0:0:0 */;
  nn.bias_add(%25, %v_param_16) /* span=PartitionedCall:0:0:0 */
}
